#+title: Main emacs configuration
#+property: header-args:emacs-lisp :tangle ./init.el

* Setup straight.el

#+begin_src emacs-lisp
  ;; init.el -- lexical-binding: t; --

  ;; Set up staight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
  	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
  	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	  (url-retrieve-synchronously
  	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  	   'silent 'inhibit-cookies)
  	(goto-char (point-max))
  	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Set up use-package
  (straight-use-package 'use-package)

  ;; Configure straight.el to use use-package
  (setq straight-use-package-by-default t)

#+end_src

* Org mode

#+begin_src emacs-lisp

  (use-package org
    :straight t
    :hook (org-mode . (lambda ()
                        (org-indent-mode 1)
                        (visual-line-mode 1)))
    :config
    ;(setq org-latex-classes
    ;    '(("beamer"
    ;       "\\documentclass[presentation]{beamer}"
    ;       ("\\section{%s}" . "\\section*{%s}")
    ;       ("\\subsection{%s}" . "\\subsection*{%s}")
    ;       ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
    ;
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t
          org-return-follows-link t
          org-startup-folded 'content))

#+end_src

** Org babel

#+begin_src emacs-lisp
  
  ;; Automatically tangle config on save
  (defun org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
    		      (expand-file-name "~/.emacs.d/"))
      (setq-local org-confirm-babel-evaluate nil)
      (org-babel-tangle)))
  (add-hook 'org-mode-hook
    	  (lambda ()
    	    (add-hook 'after-save-hook #'org-babel-tangle-config nil 'local)))

  ;; To execute or export code in org-mode code blocks
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (latex . t)
       (C . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

** Org add-ons

#+begin_src emacs-lisp

  (use-package org-superstar
    :straight t
    :after org
    :hook (org-mode .  org-superstar-mode)
    :config
    ;; Customize the bullets
    (setq org-superstar-special-todo-items t
          ;; Header bullets
          org-superstar-headline-bullets-list '("▶" "⁖" "●" "◉" "✸")
          ;; Item bullets
          org-superstar-item-bullet-alist '((42 . 9728)
                                            (43 . 9811)
                                            (45 . 8881))))

  (use-package visual-fill-column
    :straight t
    :config
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)

    (defun org-mode-visual-fill ()
      (setq visual-fill-column-width 100
            visual-fill-column-center-text t)
      (visual-line-mode 1)
      (visual-fill-column-mode 1))

    (add-hook 'org-mode-hook #'org-mode-visual-fill))

  (use-package org-modern
    :straight t
    :config

    ;; Agenda styling
    (setq  
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "◀── now ─────────────────────────────────────────────────")

    ;; Option 2: Globally

    (with-eval-after-load 'org (global-org-modern-mode)))

#+end_src


** Org agenda

#+begin_src emacs-lisp

  (setq org-agenda-files '("~/org/agenda"))

  (setq org-capture-templates
        '(("e" "Exam Date" entry (file "~/org/agenda/exam.org")
           "* %?\n  DEADLINE: %^t")
          ("p" "Problem Set" entry (file "~/org/agenda/problem-sets.org")
           "* %?\n  DEADLINE: %^t\n  %a")))

  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

#+end_src


* Keybindings

** Evil mode

#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    ;; For this to work, it has to be set before evil is loaded, hence the :init block, but then evil must be loaded before any other package that uses evil.
    (setq evil-want-C-u-scroll t)

    ;; I took this from the evil-collection documentation, I dont know what it does
    (setq evil-want-keybinding nil)

    :config
    (evil-set-undo-system 'undo-tree)
    (setq evil-search-module 'evil-search)

    ;; Cursor appearance in different Evil states
    (setq evil-visual-state-cursor '(hollow))
    (setq evil-ex-visual-char-range t)
    (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (setq-default evil-cross-lines t)

    :bind (:map evil-insert-state-map
                ("C-t" . evil-normal-state)
           :map org-mode-map
                ("RET" . org-return))
    
    :config
    (evil-mode 1))


  (use-package evil-collection
    :after evil
    :straight t
    :config
    (evil-collection-init))

  (use-package evil-surround
    :straight t
    :config
    (global-evil-surround-mode 1))

  ;; Gotta check what this package does
  (use-package org-evil
    :straight t)

  (use-package evil-escape
    :straight t
    :config
    ;; default is fd, change to jk
    (setq-default evil-escape-key-sequence "jk")

    ;; default value
    (setq-default evil-escape-delay 0.1)

    ;; s-e
    (setq evil-escape-unordered-key-sequence t)

    (evil-escape-mode 1)
    )

  (use-package evil-snipe
    :straight t
    :config
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1)
    (setq evil-snipe-scope 'whole-line)
    (setq evil-snipe-spillover-scope 'whole-visible)
    )

  (use-package undo-tree
    :straight t
    :config

    (setq evil-want-fine-undo t)
    (global-undo-tree-mode 1))
#+end_src

** General

#+begin_src emacs-lisp
    (use-package general
      :straight t
      :ensure t
      :config
      (general-create-definer my/leader
        :states '(normal visual insert emacs)
        :prefix "SPC"
        :non-normal-prefix "C-SPC")

      (use-package which-key
        :straight t
        :config
        (setq which-key-idle-secondary-delay 0.1)
        (which-key-mode)
        )

      ;; Global keybindings
      (my/leader
        "f" '(:ignore t :which-key "File")
        "f f" 'find-file
        "f s" 'save-buffer
        "f r" 'rename-file
        "f p" 'open-config-file ;This is a custom function
        "w" '(:ignore t :which-key "Window")
        "b" '(:ignore t :which-key "Buffer")
        "b b" 'consult-buffer
        "b k" 'consult-buffer-kill)

      ;; Org mode keybindings
      (my/leader :keymaps 'org-mode-map
        "c" '(:ignore t :which-key "Org mode")
        "c p" 'org-latex-export-to-pdf
        "c o" 'my/open-exported-pdf)
    )


#+end_src



* Dired

#+begin_src emacs-lisp
  (with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "C-+") 'dired-create-empty-file))

#+end_src

* User interface

** Basics
#+begin_src emacs-lisp

  (setq initial-major-mode 'org-mode)
  (setq delete-by-moving-to-trash t)

  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)

  (setq use-short-answers t)

  (add-hook 'after-init-hook #'recentf-mode)
  (setq recentf-save-file
        (expand-file-name "recentf" "~/.emacs.d/var"))

  (setq kill-do-not-save-duplicates t)

  ;; Make scrolling less stuttered
  (setq auto-window-vscroll nil)
  (setq fast-but-imprecise-scrolling t)
  (setq scroll-conservatively 101)
  (setq scroll-margin 0)
  (setq scroll-preserve-screen-position t)

  ;; Better support for files with long lines
  (setq-default bidi-paragraph-direction 'left-to-right)
  (setq-default bidi-inhibit-bpa t)
  (global-so-long-mode 1)


  ;; Make shebang (#!) file executable when saved
  (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)

  (setq undo-limit 67108864) ; 64mb.
  (setq undo-strong-limit 100663296) ; 96mb.
  (setq undo-outer-limit 1006632960) ; 960mb.

  ;; Go to scratch buffer at startup
  (setq inhibit-startup-message t
       initial-buffer-choice t)

   ;; Remove GUI elements
   (tool-bar-mode -1)  ; Disable the toolbar
   (menu-bar-mode -1)  ; Disable the menu bar
   (scroll-bar-mode -1)  ; Disable the scroll bar
   (tooltip-mode -1)  ; Disable tooltips
   (set-fringe-mode 10)  ; Add some breathing room to the sides

   (column-number-mode)
   (global-display-line-numbers-mode t)
   (setq display-line-numbers-type 'relative)

   ;; Disable line numbers for some modes
   (dolist (mode '(term-mode-hook
                   shell-mode-hook
                   eshell-mode-hook
  		 pdf-view-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (custom-set-faces
  '(default ((t (:font "Source Code Pro 14")))))

  ;; Make gd pauses faster by decreasing the treshhold
  (setq gc-cons-threshold (* 2 1000 1000))



  (use-package savehist
    :straight t
    :init
    (savehist-mode))

  (use-package smartparens
    :straight t
    :config
    (smartparens-global-mode))

  (use-package rainbow-delimiters
    :straight t)

  (use-package doom-themes
    :straight t
    :config
    ;; necessary in daemon mode
    (setq doom-modeline-icon t)
    
    ;; Set up visual bell effect globally
    (doom-themes-visual-bell-config))

  ;; Used for the icons in the modeline
  (use-package nerd-icons
    :straight t)

  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-icon t)
    (doom-modeline-height 15)
    (doom-modeline-major-mode-icon t))

  ;; Load and apply a theme
  (load-theme 'doom-spacegrey t)


#+end_src

** Completions
+ When changing frameworks you need to edit [[*General][General]]

  
*** Helm

#+begin_src emacs-lisp
  (use-package helm
    :straight t
    :init
    (helm-mode 1)
    (helm-autoresize-mode 1)
    :config
    (setq helm-split-window-inside-p t
          helm-move-to-line-cycle-in-source t
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8
          helm-ff-file-name-history-use-recentf t
          helm-idle-delay 0.01
          helm-input-idle-delay 0.01
          helm-candidate-number-limit 50
          helm-ff-lynx-style-map t)
    ;; Evil navigation in helm minibuffer
    (with-eval-after-load 'helm
      (define-key helm-map (kbd "C-j") 'helm-next-line)
      (define-key helm-map (kbd "C-k") 'helm-previous-line)
      ;;(define-key helm-find-files-map (kbd "<tab>") 'helm-ff-RET)
      (define-key helm-find-files-map (kbd "C-l") 'helm-ff-RET)
      (define-key helm-find-files-map (kbd "C-h") 'helm-find-files-up-one-level)
      (define-key helm-find-files-map (kbd "<return>") 'helm-ff-RET))
    :bind
    (("M-x" . helm-M-x)
     ("C-x C-f" . helm-find-files)
     ("C-x b" . helm-mini)
     ("C-x r b" . helm-filtered-bookmarks)
     ("C-x c o" . helm-occur)
     ("C-h SPC" . helm-all-mark-rings)))

  (use-package helm-swoop
    :straight t
    :bind
    (("M-i" . helm-swoop)
     ("M-I" . helm-swoop-back-to-last-point)
     ("C-c M-i" . helm-multi-swoop)
     ("C-x M-i" . helm-multi-swoop-all)))

  (use-package helm-projectile
    :straight t
    :after projectile
    :config
    (helm-projectile-on))

  (use-package helm-ag
    :straight t
    :bind
    (("C-c g" . helm-do-ag-project-root)))

  (use-package helm-descbinds
    :straight t
    :init
    (helm-descbinds-mode))

  (use-package helm-ls-git
    :straight t
    :bind
    (("C-x C-d" . helm-browse-project)))
#+end_src

*** Yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
         :straight t
         :custom
         (yas-snippet-dirs
          '("~/.emacs.d/snippets"))
         
         :config
         (yas-global-mode 1)
     
         (define-key yas-minor-mode-map (kbd "<tab>") nil)
         (define-key yas-minor-mode-map (kbd "TAB") nil)
     
         ;; Bind `C-c y' to `yas-expand' ONLY.
         (define-key yas-minor-mode-map (kbd "M-/") #'yas-expand)
     
         :custom
         (yas-expand-only-for-last-commands nil)
         (yas-wrap-around-region t)
         (yas-indent-line 'fixed)
     
         )

  (defun load-subject-snippets ()
    "Load subject-specific yasnippets based on the current file's directory."
    (let ((subject-dir (locate-dominating-file default-directory "snippets")))
      (when subject-dir
        (let ((snippet-dir (concat subject-dir "snippets/org-mode")))
          (add-to-list 'yas-snippet-dirs snippet-dir)
          (yas-reload-all)))))

  (add-hook 'org-mode-hook 'load-subject-snippets)

#+end_src


*** Consult framework (on hold)

#+begin_src emacs-lisp
  ;; (use-package vertico
  ;;   :straight t
  ;;   :bind (:map vertico-map
  ;;               ("C-j" . vertico-next)
  ;;               ("C-k" . vertico-previous)
  ;;               ("C-f" . vertico-exit)
  ;;               :map minibuffer-local-map
  ;;               ("M-h" . backward-kill-word))
  ;;   :custom
  ;;   (vertico-cycle t)
  ;;   :init (vertico-mode))
  ;; 
  ;; (use-package consult
  ;;   :straight t
  ;;   :hook (completion-list-mode . consult-preview-at-point-mode)
  ;;   :init
  ;;   (setq register-preview-delay 0.5
  ;;         register-preview-function #'consult-register-format)
  ;;   (advice-add #'register-preview :override #'consult-register-window)
  ;;   :bind (("C-s" . consult-line)
  ;;          ("M-y".  consult-yank-pop)
  ;;          ("C-x b" . consult-buffer)
  ;;          ("C-x r b" . consult-bookmark)
  ;;          ("M-g g" . consult-goto-line)
  ;;          ("M-g o" . consult-outline)
  ;;          ("M-g m" . consult-mark)
  ;;          ("M-g s" . consult-ripgrep)))
  ;; 
  ;; (use-package marginalia
  ;;   :straight t
  ;;   :after vertico
  ;;   :custom
  ;;   (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  ;;   :init
  ;;   (marginalia-mode))
  ;; 
  ;; (use-package orderless
  ;;   :straight t)
  ;; (setq completion-styles '(orderless))
  ;; 
  ;; (use-package embark
  ;;   :straight t
  ;;   :ensure t
  ;;   :bind
  ;;   (("C-." . embark-act)
  ;;    ("C-;" . embark-dwim)))
  ;; 
  ;; (use-package embark-consult
  ;;   :straight t
  ;;   :ensure t
  ;;   :after (embark consult)
  ;;   :demand t ; Load immediately
  ;;   :hook
  ;;   (embark-collect-mode . consult-preview-at-point-mode))
  ;; 
  ;; (use-package company
  ;;   :straight t
  ;;   :config
  ;;   (setq company-idle-delay 0.2
  ;;         company-minimum-prefix-length 1
  ;;         company-tooltip-limit 10
  ;;         company-tooltip-align-annotations t
  ;;         company-tooltip-flip-when-above t
  ;;         company-dabbrev-downcase nil
  ;;         company-dabbrev-ignore-case nil
  ;;         company-dabbrev-code-ignore-case nil
  ;;         company-dabbrev-code-everywhere t
  ;;         company-transformers '(company-sort-by-backend-importance)
  ;;         company-backends '((company-dabbrev)))
  ;;   ;; Make <tab> the completion key 
  ;;   (define-key company-active-map (kbd "RET") #'company-complete-selection)
  ;;   ;(define-key company-active-map (kbd "RET") nil)
  ;;   
  ;;   (global-company-mode)
  ;;   )
  ;; (use-package nerd-icons-completion
  ;;   :straight t
  ;;   :config
  ;;   (nerd-icons-completion-mode))
  ;; 
  ;; (use-package company-box
  ;;   :straight t
  ;;   :ensure t
  ;;   :hook (company-mode . company-box-mode))
  ;; 
  ;; (setq dabbrev-case-fold-search nil
  ;;       dabbrev-case-replace nil)
  ;; 
  ;; 
  ;; 
#+end_src


* Programs
** LSP

#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :commands lsp
    :hook (python-mode . lsp-deferred))
#+end_src

** LaTex

#+begin_src emacs-lisp

  (use-package auctex
    :straight t
    :defer t
  ;  :hook (LaTeX-mode . (lambda ()
  ;			(push (list 'output-pdf "Zathura")
  ;			      TeX-view-program-selection)))
    )

  (use-package cdlatex
    :straight t
    :defer t
    :hook
    ((org-mode . org-cdlatex-mode)
     (latex-mode . cdlatex-mode)))

  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c p") 'org-latex-export-to-pdf))


#+end_src

** Pdf

#+begin_src emacs-lisp
    (use-package pdf-tools
      :straight t
      :config
      (pdf-tools-install))

#+end_src

+ Open with evince

#+begin_src emacs-lisp
  (defun my/open-with-evince (file)
    "Open the specified FILE with Evince."
    (start-process "evince" nil "evince" (expand-file-name file)))

  (defvar my/helm-source-pdfs
    (helm-build-sync-source "PDF files"
      :candidates (lambda ()
                    (directory-files
                     default-directory t "\\.pdf\\'"))
      :action '(("Open with Evince" . my/open-with-evince))))

  (defun my/helm-pdf-opener ()
    "Helm prompt for selecting and opening a PDF with Evince."
    (interactive)
    (helm :sources 'my/helm-source-pdfs
          :buffer "*helm pdfs*"))


  (defun my/helm-pdfs-in-books ()
    "Helm prompt for browsing and opening PDFs in the ~/books/ directory."
    (interactive)
    (let ((default-directory "~/books/"))
      (my/helm-pdf-opener)))

  (defun my/helm-pdfs-in-latexdocs ()
    "Helm prompt for browsing and opening PDFs in the ~/LaTexdocs/ directory."
    (interactive)
    (let ((default-directory "~/LaTexdocs/"))
      (my/helm-pdf-opener)))

  ;; Bind custom prompts to specific key combinations
  (global-set-key (kbd "C-c o p") 'my/helm-pdf-opener)           
  (global-set-key (kbd "C-c o b") 'my/helm-pdfs-in-books)       
  (global-set-key (kbd "C-c o l") 'my/helm-pdfs-in-latexdocs)  

#+end_src




** Python

#+begin_src emacs-lisp

  (use-package python-mode
    :straight t
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :hook (python-mode . lsp)
    :config
    (setq python-indent-offset 4) ; Set your preferred indentation
    (setq python-shell-completion-native-enable nil))

#+end_src

** Polybar

#+begin_src emacs-lisp
;; Make sure the server is started (better to do this in your main Emacs config!)
(server-start)

(defvar my/polybar-process nil
  "Holds the process of the running Polybar instance, if any")

(defun my/kill-panel ()
  (interactive)
  (when my/polybar-process
    (ignore-errors
      (kill-process my/polybar-process)))
  (setq my/polybar-process nil))

(defun my/start-panel ()
  (interactive)
  (my/kill-panel)
  (setq my/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

(defun my/send-polybar-hook (module-name hook-index)
  (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

(defun my/send-polybar-exwm-workspace ()
  (my/send-polybar-hook "exwm-workspace" 1))

;; Update panel indicator when workspace changes
(add-hook 'exwm-workspace-switch-hook #'my/send-polybar-exwm-workspace)


(defun my/polybar-exwm-workspace ()
  (pcase exwm-workspace-current-index
    (0 "")
    (1 "")
    (2 "")
    (3 "")
    (4 "")
    (5 "5")
    (6 "6")
    (7 "7")
    (8 "8")
    (9 "9")
    ))
#+end_src


* Custom functions

#+begin_src emacs-lisp
    (defun open-config-file ()
      "Open a specific file."
      (interactive)
      (find-file "~/.emacs.d/emacs.org"))

    (global-set-key (kbd "C-c o c") 'open-config-file)

    ;;  (defun my/change-file-extension ()
    ;;      (interactive)
    ;;      (let* ((new-extension (read-from-minibuffer "Type the new extension including the dot (.): "))
    ;;             (new-file-name (concat (file-name-sans-extension buffer-file-name) new-extension))
    ;;             (filename (buffer-file-name)))
    ;;        (rename-file filename new-file-name t)
    ;;        (rename-buffer (concat (file-name-sans-extension (buffer-name)) new-extension))
    ;;        (set-visited-file-name new-file-name)
    ;;        (set-buffer-modified-p nil)
    ;;        (message (concat "File renamed to " new-file-name))))
    ;;
    ;;(general-define-key
    ;; "C-c C-f e" #'my/change-file-extension)

#+end_src

** Screenshot


** Uni

*** Start writing notes

#+begin_src emacs-lisp
  (defun my/select-file-from-dirs (dirs extension prompt)
    "Prompt the user to select a file with EXTENSION from a list of DIRS with a given PROMPT."
    (let ((files (apply 'append
                        (mapcar (lambda (dir)
                                  (directory-files dir t (concat ".*\\." extension "$")))
                                dirs))))
      (completing-read prompt files nil t)))

  (defun my/close-buffers-from-other-dirs (current-dir other-dirs)
    "Close buffers visiting files from OTHER-DIRS but not from CURRENT-DIR."
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (and buffer-file-name
                   (not (string-prefix-p (expand-file-name current-dir) buffer-file-name))
                   (seq-some (lambda (dir) (string-prefix-p (expand-file-name dir) buffer-file-name)) other-dirs))
          (kill-buffer)))))

  ;; Used before switching workspace
  (defun my/in-exwm-session-p ()
    "Check if the current session is an EXWM session."
    (featurep 'exwm))



  (defun my/uni-session ()
    "Prompt for an Org file and open it with the corresponding PDF file and close other buffers from uni/"
    (interactive)
    (let* ((uni-dirs '("~/uni/cuantica/"
  		     "~/uni/estado-solido/"
                       "~/uni/geometriad/"
  		     "~/uni/instru2/"
  		     "~/uni/MCR/"
                       "~/uni/TEM/"
  		     "~/uni/termo/"))
           (org-file (my/select-file-from-dirs uni-dirs "org" "Session: "))
           (pdf-file (concat (file-name-sans-extension org-file) ".pdf"))
           (current-dir (file-name-directory org-file))
           (other-dirs (remove current-dir uni-dirs)))
      ;; Close buffers from other subject directories
      (my/close-buffers-from-other-dirs current-dir other-dirs)
      ;; 
      (when (my/in-exwm-session-p)
        (exwm-workspace-switch 3))
      ;; Split the frame vertically and open the Org and PDF files
      (delete-other-windows)
      (find-file pdf-file)
      (auto-revert-mode)
      (split-window-right)
      (find-file org-file)))

  ;; Bind the function to a key, for example Super-o
  (global-set-key (kbd "C-c n") 'my/uni-session)
#+end_src

*** Inkscape shennenigans

+ Opening figures
  
#+begin_src emacs-lisp

  (defun my/list-svg-files ()
      "List all SVG files in the /figures directory."
      (let ((figures-dir "./figures/"))
        (directory-files figures-dir nil "\\.svg$")))

  (defvar my/current-figure nil
    "The path to the currently selected figure being edited.")

  ;; Need to work on edge cases for the file names
  (defun my/select-figure ()
    "Use Helm to select an SVG file from the /figures directory.
  Includes an option to create a new figure."
    (let* ((buffer-name (buffer-name (current-buffer)))  ;; Get the buffer name
           (subject (file-name-base (file-name-sans-extension buffer-name)))  ;; Extract subject
           (figures-dir (expand-file-name (concat "~/uni/" subject "/figures/")))  ;; Construct figures directory path
           (template-file (expand-file-name "~/uni/template.svg"))
           (existing-files (my/list-svg-files))
           (svg-files (append '("New Figure") existing-files))
           (selected-file (helm :sources (helm-build-sync-source "Figures"
                                           :candidates svg-files
                                           :fuzzy-match t)
                                  :buffer "*helm select figure*")))
      (setq my/current-figure
            (if (string= selected-file "New Figure")
                (let ((new-fig-name (read-string "Enter new figure name: ")))
                  ;; Ensure the new figure name is valid and does not already exist
                  (if (or (string-blank-p new-fig-name)
                          (member (concat new-fig-name ".svg") existing-files))
                      ;; Handle the case where the figure name is invalid or already exists
                      (progn
                        (message "Using existing figure.")
                        (concat figures-dir new-fig-name ".svg"))
                    (let ((new-file-path (concat figures-dir new-fig-name ".svg")))
                      ;; Copy the template to the new file
                      (copy-file template-file new-file-path)
                      new-file-path)))
              (concat figures-dir selected-file)))
      my/current-figure))

  (defun my/open-inkscape (file-path)
    "Open the given FILE-PATH in Inkscape."
    (start-process "inkscape" nil "inkscape" file-path))

  (defun my/open-figure ()
    "Select or create a figure using a template and open it in Inkscape."
    (interactive)
    (let ((file-path (my/select-figure)))
      (my/open-inkscape file-path)))




  (defun my/open-figure ()
    "Select or create a figure using a template and open it in Inkscape."
    (interactive)
    (my/select-figure)  ;; This sets my/current-figure
    (when my/current-figure
      (my/open-inkscape my/current-figure)))



  (global-set-key (kbd "C-c f f") 'my/open-figure)



#+end_src

+ Saving and closing

  #+begin_src emacs-lisp

    (defun my/inkscape-save ()
      "Send C-s to Inkscape to save the current file."
      (interactive)
      (exwm-input--fake-key ?\C-s))

    (defun my/export-figure-to-pdf ()
      "Export the SVG file to PDF and LaTeX using Inkscape."
      (interactive)
      (let ((export-command (format "inkscape --export-latex --export-type=pdf %s" (shell-quote-argument my/current-figure))))
        (message "Running command: %s" export-command)  ;; Print the command for debugging
        (shell-command export-command)))


    (defun my/close-inkscape-window ()
      "Close the Inkscape window."
      (interactive)
      (exwm-input--fake-key ?\C-q))

    (defun my/finish-figure ()
      "Save, export, close the current Inkscape figure, and save LaTex code to kill-ring."
      (interactive)
      (my/inkscape-save)
      (let* ((fig-name (file-name-base my/current-figure))
             (latex-code (format "\\begin{figure}[ht]\n    \\centering\n    \\incfig[]{%s}\n    \\caption{%s}\n    \\label{fig:%s}\n\\end{figure}\n"
                                 fig-name
                                 (string-replace "-" " " (capitalize fig-name))
                                 fig-name)))
        (my/export-figure-to-pdf)
        (my/close-inkscape-window)
        (kill-new latex-code) ;; Copy LaTeX code to kill-ring
        (message "Incfig code copied to kill-ring.")))

  #+end_src






























